#!/usr/bin/env python3.6

import sys
import subprocess
import glob

# Make io unbuffered
def flush(fn):
  def newfn(x):
    fn(x)
    sys.stdout.flush()
  return newfn
sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)

def run(bash):
  proc = subprocess.run(bash, shell=True)
  return proc.returncode == 0

###################
# Build logic
###################
def pretty_print(msg, color):
  global machine
  if not machine:
    print('\x1b[6;30;' + str(color) + 'm' + "\n$ " + msg + '\x1b[0m')

def run_frontend(bash):
  pretty_print(bash, 44)
  return run(bash)

def run_backend(bash):
  pretty_print(bash, 42)
  return run(bash)

def run_test(bash):
  pretty_print(bash, 45)
  return run(bash)

def elm_package():
  return run_frontend("cd client && elm-package install --yes")

def elm_make():
  global machine
  if machine:
    return run_frontend("cd client && elm-make --report=json Main.elm --output=/dev/null")
  else:
    # unbuffer makes elm think it's talking a terminal
    return run_frontend("cd client && unbuffer elm-make Main.elm --warn --debug --yes --output ../server/static/elm.js")

def convert_dark_file_to_graph(filename):
  return subprocess.check_output(["server/convert_to_graph.native", filename])

def stringify(json):
  return json.decode() \
             .replace("\\", "\\\\") \
             .replace("\"", "\\\"") \
             .replace("\n", "\\n") \
             .replace("\r", "\\r")

def generate_elm_test_data():
  graphs = []
  for d in glob.glob("server/testdata/*.dark"):
    graphs += [stringify(convert_dark_file_to_graph(d))]
  filename = "client/tests/DarkTestData.elm"
  graphs = "\"\n  , \"".join(graphs)
  output = """module DarkTestData exposing (..)

data : List String
data =
  [ \"""" + graphs + """\"]
"""

  with open(filename, "w") as file:
    file.write(output)


def elm_test():
  generate_elm_test_data()
  return run_test("cd client && unbuffer elm-test")

landmarks = " OCAML_LANDMARKS='time,allocation,on,auto,format=json,output=profile.json'"
def ocaml_build():
  # better-errors doesn't preserve exit codes, so save the output and
  # check for success
  global profile
  cd = "cd server &&"
  build = " ocamlbuild -j 0 dark.native"
  build_converter = " && ocamlbuild -j 0 convert_to_graph.native"
  if profile:
    return run_backend(cd + landmarks + build)
  else:
    return run_backend(cd + build + build_converter)

def ocaml_test():
  return run_backend("cd server && ocamlbuild test.native && unbuffer _build/test/test.native 2>&1")

def reload_server():
  global profile
  cd = "cd server &&"
  runserver = "../scripts/support/runserver"
  if profile:
    return run_backend(cd + landmarks + runserver)
  else:
    return run_backend(cd + runserver)

def reload_browser():
  # Sends a signal to another fswatch on your mac
  return run_frontend("touch .browser-trigger")

class Should:
  def __init__(self):
    self.ocaml_build = False
    self.ocaml_test = False
    self.elm_package = False
    self.elm_make = False
    self.elm_test = False
    self.reload_browser = False
    self.reload_server = False

def execute(should):
  ob = should.ocaml_build and ocaml_build()
  should.reload_server |= ob
  rs = should.reload_server and reload_server()

  ep = should.elm_package and elm_package()
  should.elm_make |= ep
  em = should.elm_make and elm_make()

  should.reload_browser |= rs or em
  rb = should.reload_browser and reload_browser()

  should.ocaml_test |= ob
  ot = should.ocaml_test and ocaml_test()
  should.elm_test |= em
  et = should.elm_test and elm_test()


def mark(should, f):
  # Frontend
  if "elm-package.json" in f:
    should.elm_package = True
  elif "Tests.elm" in f:
    should.elm_test = True
  elif ".elm" in f or ".js" in f:
    should.elm_make = True

  # Ocaml
  elif ("test/test.ml" in f):
    should.ocaml_test = True

  elif (".ml" in f) or ("jbuild" in f) or ("_tags" in f):
    should.ocaml_build = True

  elif (".css" in f) or (".html" in f):
    should.reload_browser = True

  # Other
  else:
    print("unknown file: " + f, end='')

  return should



def ignore(filename):
  # substring
  ignores = [ ".git"
            , "scripts/"
            , "logs/"
            , ".merlin"
            , "client/elm-stuff"
            , "client/tests/elm-stuff"
            , "client/repl-temp"
            , "client/tests/DarkTestData.elm"
            , "server/static/elm.js"
            , "server/cache/"
            , "server/_build/"
            , "server/appdata/"
            , "server/dark.byte"
            , "server/dark.native"
            , "server/test.byte"
            , "server/test.native"
            , "server/convert_to_graph.native"
            , "server/gmon.out"
            , "server/profile.json"
            , "server/testdata"
            , "server/ocamlbuild_output.txt"
  ]
  for i in ignores:
    if i in filename:
      return True
  # ocaml build temporary
  if filename[-10:-8] == "/C":
    return True
  # emacs thing
  if "/.#" in filename:
    return True
  return False


machine = False # Don't print pretty things, use different formatting
profile = False # Run ocaml stuff under the landmarks profiler
files = []
def main():
  global machine
  for f in sys.argv[1:]:
    if f == "--machine":
      machine = True
    elif not ignore(f):
      files.append(f)

  if len(files) > 0:
    pretty_print("Compiling: " + str(files), 43)

    should = Should()
    for f in files:
      mark(should, f)

    execute(should)

main()
