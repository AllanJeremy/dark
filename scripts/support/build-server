#!/usr/bin/env python3.6

import sys
import subprocess
import threading

# Make io unbuffered
def flush(fn):
  def newfn(x):
    fn(x)
    sys.stdout.flush()
  return newfn
sys.stdout.write = flush(sys.stdout.write)
sys.stdout.writelines = flush(sys.stdout.writelines)

def run(bash):
  proc = subprocess.run(bash, shell=True)
  return proc.returncode == 0

def compile(files):
  run("scripts/support/compile " + " ".join(files))

def initial_compile():
  compile(["client/Main.elm", "server/main/dark.ml"])

def process_watchers():
  files = []

  for f in sys.stdin:
    if "***BATCHEND***" in f:
      compile(files)
      files = []
    else:
      f, _ = f.strip().split(" ")
      files.append(f)

def background_task(fn):
  threading.Thread(target=fn).start()


def main():
  watch = False
  compile = False
  for f in sys.argv[1:]:
    if f == "--compile":
      compile = True
    elif f == "--watch":
      watch = True

  if compile and watch:
    background_task(initial_compile)
    process_watchers()
  else:
    if compile:
      background_task(initial_compile)

    if watch:
      process_watchers()


main()

