#!/usr/bin/env bash

set -euo pipefail

# Use to build image from clean start
if [[ ! -v NEVER_REBUILD_DOCKER ]]; then
  echo "Building docker image"
  docker build -t dark .

  echo "Removing running containers"
  c=$(docker ps -q)
  if [[ ! -z "${c}" ]]; then
    docker rm -f "${c}";
  fi
fi

echo "watching for local changes"
scripts/support/reload-browser > logs/browser.log 2>&1 &

if [ ! -v CI ]; then
  if [ ! -d ../conduit-frontend ]; then
    echo "pulling the conduit frontend"
    pushd .. && git clone git@github.com:darklang/conduit-frontend && popd
  fi
fi

# https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
if [ -v CI ]; then
  set -x
  OTHERIMAGE=configs-"${CIRCLE_BUILD_NUM}"
  docker create \
    -v /home/dark/conduit-frontend \
    -v /home/dark/app  \
    --name $OTHERIMAGE \
    alpine:3.4 \
    /bin/true
  docker cp . $OTHERIMAGE:/app
  MOUNT="--volumes-from $OTHERIMAGE"
else
  MOUNT="--mount type=bind,src=$PWD,dst=/home/dark/app \
        --mount type=bind,src=$PWD/../conduit-frontend,dst=/home/dark/conduit-frontend"
fi

echo "Run the build"
fswatch --event-flag-separator=, \
        -r * \
        -x \
    | docker run \
             --rm \
             -i \
             $MOUNT \
             -v pgconf:/etc/postgresql \
             -v pglogs:/var/log/postgresql \
             -v pgdata:/var/lib/postgresql \
             -p 8000:8000 \
             -p 8001:8001 \
             --security-opt seccomp=scripts/support/chrome-seccomp.json \
             -w /home/dark/app \
             dark \
             scripts/support/build-server "$@"
