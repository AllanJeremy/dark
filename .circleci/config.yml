version: 2.1

# There is a strong connection between this file and the equivalent files for
# running Dark in dev, which are scripts/builder and
# scripts/support/build-server. Generally, if you add something to this file,
# there's an equivalent to be added in one of those files.

executors:
  my-executor:
    docker:
      - image: docker:stable-git
  in-container:
    working_directory: ~/app
    environment:
      IN_DEV_CONTAINER: true
      # these keys are read-only
      AWS_ACCESS_KEY_ID: "AKIAXJAGP54V756YBAHZ"
      AWS_SECRET_ACCESS_KEY: "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"
    docker:
      - image: 500377317163.dkr.ecr.us-east-1.amazonaws.com/dark-ci:latest
  # Rust is so big we create a separate container for it and only use that
  # for rust builds
  in-rust-container:
    working_directory: ~/app
    environment:
      IN_DEV_CONTAINER: true
      # these keys are read-only
      AWS_ACCESS_KEY_ID: "AKIAXJAGP54V756YBAHZ"
      AWS_SECRET_ACCESS_KEY: "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"
    docker:
      - image: 500377317163.dkr.ecr.us-east-1.amazonaws.com/dark-ci:rust-latest


commands:

  # CircleCI won't share the "deploy key" used to checkout the repo with a branch
  # unless we've opted to share secrets, which we should never do. So this adds a
  # new read-only deploy key that can only be used to check out this repo 
  dark-checkout:
    steps:
      - run:
          environment:
            DARK_DEPLOY_KEY: "-----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----"
          command: |
            mkdir -p ~/.ssh
            printf "%s\n" "${DARK_DEPLOY_KEY}" > ~/.ssh/id_rsa
      - checkout
  show-large-files-and-directories:
    steps:
      - run:
          # show any file or directory over 50M in size
          # note alpine find doesn't support +50M here
          name: show large files and directories
          command: |
            find ~ -size +51200k -exec du -h {} \;
            du -ht 50M

  ##########################
  # Check the worktree
  ##########################
  assert-clean-worktree:
    steps:
      - run:
          name: Assert the worktree is clean
          command: "bash -c '[[ -z $(git status -s) ]] && echo Workdir is clean || { echo Workdir is not clean:; git status -s; $(exit 1); }'"


  ##########################
  # Setup app
  ##########################
  setup-app:
    steps:
      - run:
          name:
            Setup build environment
          command: |
            set -x
            scripts/support/setup-circleci-environment
            scripts/support/create-app-directories
            scripts/support/create-cache-directories
            scripts/support/setup-hosts
            scripts/support/start-background-services postgresql
            env

  ##########################
  # Rust
  ##########################
  rust-setup:
    parameters:
      project: { type: string }
    steps:
      - setup-app
      - restore_cache:
          keys:
            # This cache should be about 500MB or so. It balloons over time and needs to be deleted.
            - v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}-{{ .Branch }}
            - v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}
            - v0d-<< parameters.project >>

  rust-finish:
    parameters:
      project: { type: string }
    steps:
      - run:
          name: Reduce caches
          command: cargo cache -a
      - show-large-files-and-directories

      # must persist to workspace first, as next step will remove built release artifact
      - persist_to_workspace:
          root: "."
          paths: [ << parameters.project >>/target/release/dark-<< parameters.project >> ]

      # This removes files in the top-level of target/{debug,release}, which include the actual built artifact
      # and other intermediates that will always be rebuilt on the next build (so there's no sense in caching them).
      # It also includes our own (dark*) build files from deps, which are likewise always rebuilt.
      #
      # See https://github.com/rust-lang/cargo/issues/5885 for discussion and details
      - run:
          name: Cleanup frequently changing rust artifacts
          command: |
            find << parameters.project >>/target -maxdepth 2 -type f -delete
            rm -rf << parameters.project >>/target/{debug,release}/{deps,.fingerprint}/dark*

      # https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
      - save_cache:
          name: "Save << parameters.project >> cache"
          paths:
            - << parameters.project >>/target
            - .cargo/bin/
            - .cargo/registry/index/
            - .cargo/registry/cache/
            - .cargo/git/db/
          key: v0d-<< parameters.project >>-{{ checksum "<< parameters.project >>/Cargo.lock" }}-{{ .Branch }}

  ##########################
  # Initializing the containers
  ##########################
  prep-container-creation:
    steps:
      - setup_remote_docker: { docker_layer_caching: true }

      # Save the docker env: type .docker-env when sshing in, then you can
      # use ./scripts/run-in-docker
      - run:
          name: Setup docker-env for debugging
          command: env | grep 'DOCKER\|NO_PROXY' | sed 's/^/export /' > ../docker-env

  build-gcp-containers:
    steps:
      - prep-container-creation
      - run:
          name: Regenerate combined ETags
          command: |
            scripts/support/generate-etags
            scripts/support/check-etags
            cp backend/static/etags.json rundir/
      - run: scripts/gcp-build-containers



  ##########################
  # misc
  ##########################
  auth-with-gcp:
    parameters: { background: { type: boolean } }
    steps:
      - run:
          name: Auth with GCP
          background: << parameters.background >>
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            gcloud auth activate-service-account --key-file gcloud-service-key.json

##########################
# Actual workflow
##########################
jobs:
  build-client:
    executor: in-container
    steps:
      - dark-checkout
      - setup-app
      - restore_cache:
          keys:
            - v2-client-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v2-client-{{ checksum "yarn.lock" }}
            - v2-client
      - run: scripts/support/compile --test package.json client/src/styles/app.scss
      - assert-clean-worktree
      - run: scripts/support/shellchecker # run here cause its the fastest
      - show-large-files-and-directories
      - save_cache:
          name: "Save packagejson-specific cache"
          paths: [ "node_modules" ]
          key: v2-client-{{ checksum "yarn.lock" }}-{{ .Branch }}
      - persist_to_workspace:
          root: "."
          paths:
            - backend/static/
      - store_artifacts: { path: rundir }
      - store_artifacts: { path: backend/static/etags.json }
      - store_test_results: { path: rundir/test_results }

  build-backend:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - restore_cache:
          keys:
            - v7-backend-{{ checksum "esy.json" }}
            - v7-backend
      # appsupport is needed for a unit test, but it is not needed as part
      # of the backend otherwise. It is compiled as part of the frontend
      # tests.
      - run: touch backend/static/appsupport.js
      - show-large-files-and-directories
      - run: scripts/support/compile --test esy.json
      - assert-clean-worktree
      # Doesn't need to be run post-build, but takes <1s to run
      - run: scripts/ocaml-find-unused backend/test
      - persist_to_workspace:
          # Do this before reducing size of cache
          root: "."
          paths:
            # Just enough for integration tests and deploy
            - _build/default/backend/bin/server.exe
            - _build/default/backend/bin/emergency_login_script.exe
            - _build/default/backend/bin/queue_worker.exe
            - _build/default/backend/bin/cron_checker.exe
            - backend/static/analysis.js
      - run:
          name: Reduce size of esy cache
          command: |
            set -x
            rm -Rf /home/dark/.esy/3/b
            # It seems like everything builds and rebuilds fine without
            # these. Other files are needed: .o, .a, .cma, .cmx.
            shopt -s globstar
            rm -f /home/dark/.esy/3/i/**/*.cmt
            rm -f /home/dark/.esy/3/i/**/*.cmti
            rm -f /home/dark/.esy/3/i/**/*.byte
            rm -f /home/dark/.esy/3/i/**/*.cmxs
            # These can be very cheaply rebuilt, and are about 400MB
            rm -f /home/dark/app/_build/default/backend/*/*.exe
      - show-large-files-and-directories
      - save_cache:
          paths:
            - _build
            - node_modules
            - /home/dark/.esy
          key: v7-backend-{{ checksum "esy.json" }}
      - store_artifacts: { path: rundir }
      - store_test_results: { path: rundir/test_results }


  build-stroller:
    executor: in-rust-container
    steps:
      - checkout
      - rust-setup: { project: "stroller" }
      - run: scripts/support/compile stroller/Cargo.toml --test
      - assert-clean-worktree
      - rust-finish: { project: "stroller" }

  build-queue-scheduler:
    executor: in-rust-container
    steps:
      - checkout
      - rust-setup: { project: "queue-scheduler" }
      # tests are run in rust-integration-tests
      - run: scripts/support/compile queue-scheduler/Cargo.toml
      - assert-clean-worktree
      - rust-finish: { project: "queue-scheduler" }

  build-postgres-honeytail:
    executor: my-executor
    steps:
      - checkout
      - prep-container-creation
      - run: cd postgres-honeytail && docker build -t dark-gcp-postgres-honeytail .

  validate-honeycomb-config:
    executor: my-executor
    steps:
      - checkout
      - prep-container-creation
      - run: apk add --update bash jq python py-pip && pip install yq
      - run: bash -c scripts/support/test-honeycomb-config.sh

  integration-tests:
    executor: in-container
    parallelism: 4
    steps:
      - checkout
      - setup-app
      - attach_workspace: { at: "." }
      - restore_cache: # get testcafe
          keys:
            - v1d-client-{{ checksum "yarn.lock" }}-{{ .Branch }}
            - v1d-client-{{ checksum "yarn.lock" }}
            - v1d-client
      - show-large-files-and-directories
      - run:
          name: Run integration tests
          command: |
            scripts/support/generate-etags
            scripts/support/runserver

            # get full list of tests
            grep ^test integration-tests/tests.js | sed 's/.*"\(.*\)".*/\1/' > rundir/all-tests
            # split them using timing info
            TESTS=$(circleci tests split --split-by=timings --timings-type=testname rundir/all-tests)
            # concat them into a pattern (note: $TESTS is deliberately unquoted)
            PATTERN=$(printf -- "^%s$|" $TESTS)
            # remove last char
            PATTERN=${PATTERN%?}
            scripts/wait-until-server-ready
            integration-tests/run.sh --pattern="$PATTERN"
      - assert-clean-worktree
      - store_artifacts: { path: rundir }
      - store_test_results: { path: rundir/test_results }


  rust-integration-tests:
    executor: in-rust-container
    steps:
      - checkout
      - rust-setup: { project: "queue-scheduler" }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - run:
          name: Trigger migrations with runserver
          command: |
            # Run the server long enough to ensure it runs the migrations
            scripts/support/generate-etags
            scripts/support/runserver
            scripts/wait-until-server-ready
      - run:
          name: Run queue-scheduler tests
          command: scripts/run-rust-tests queue-scheduler
      - assert-clean-worktree

  gcp-containers-test:
    executor: in-container
    steps:
      # Just test that we can build them for now
      - checkout
      - setup-app
      - attach_workspace: { at: "." }
      - build-gcp-containers

  push-to-gcp:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - auth-with-gcp: { background: true }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - build-gcp-containers
      - run: scripts/push-assets-to-cdn
      - run: scripts/gcp-push-images-to-gcr
      # Save the image IDs for deployment later
      - run:
          name: Save image IDs
          command: |
            mkdir gcr-image-ids
            time docker images gcr.io/balmy-ground-195100/dark-gcp -q | head -n 1 > gcr-image-ids/server
            time docker images gcr.io/balmy-ground-195100/dark-gcp-qw -q | head -n 1 > gcr-image-ids/qw
            time docker images gcr.io/balmy-ground-195100/dark-gcp-cron -q | head -n 1 > gcr-image-ids/cron
            time docker images gcr.io/balmy-ground-195100/dark-gcp-stroller -q | head -n 1 > gcr-image-ids/stroller
            time docker images gcr.io/balmy-ground-195100/dark-gcp-queue-scheduler -q | head -n 1 > gcr-image-ids/queue-scheduler
            time docker images gcr.io/balmy-ground-195100/tunnel -q | head -n 1 > gcr-image-ids/tunnel
            time docker images gcr.io/balmy-ground-195100/dark-gcp-postgres-honeytail -q | head -n 1 > gcr-image-ids/postgres-honeytail
      - persist_to_workspace:
          root: "."
          paths: [ gcr-image-ids ]


  deploy:
    executor: in-container
    steps:
      - checkout
      - setup-app
      - auth-with-gcp: { background: false }
      - attach_workspace: { at: "." }
      - show-large-files-and-directories
      - run: |
          scripts/gke-deploy       \
            --server-image-id=`cat gcr-image-ids/server` \
            --qw-image-id=`    cat gcr-image-ids/qw`     \
            --cron-image-id=`  cat gcr-image-ids/cron`   \
            --stroller-image-id=`cat gcr-image-ids/stroller` \
            --queue-scheduler-image-id=`cat gcr-image-ids/queue-scheduler` \
            --tunnel-image-id=`cat gcr-image-ids/tunnel` \
            --postgres-honeytail-image-id=`cat gcr-image-ids/postgres-honeytail`
          scripts/honeymarker.sh


workflows:
  version: 2
  build-and-deploy:
    jobs:
      # initial builds & tests
      - build-postgres-honeytail
      - validate-honeycomb-config
      - build-backend
      - build-client
      - build-stroller
      - build-queue-scheduler

      # expensive tests
      - rust-integration-tests:
          requires:
            - build-backend
            - build-client
            - build-queue-scheduler
      - integration-tests:
          requires:
            - build-backend
            - build-client
      - gcp-containers-test:
          requires:
            - build-client # to rebuild etags
            - build-backend
            - build-stroller
            - build-queue-scheduler

      # pre-deploy, in parallel with integration-tests
      - push-to-gcp:
          filters:
            branches:
              only: master
          requires:
            - build-backend
            - build-client
            - build-stroller
            - build-queue-scheduler
            - build-postgres-honeytail

      # actual deploy
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - validate-honeycomb-config
            - integration-tests
            - rust-integration-tests
            - push-to-gcp
