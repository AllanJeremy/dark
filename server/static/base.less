html {
  height: 100%;
}

/* From "default dark" in https://chriskempson.github.io/base16/ */
@black1: #181818;
@black2: #282828;
@grey1 : #383838;
@grey2 : #585858;
@grey3 : #b8b8b8;
@white3: #d8d8d8;
@white2: #e8e8e8;
@white1: #f8f8f8;
@red   : #ab4642;
@orange: #dc9656;
@yellow: #f7ca88;
@green : #a1b56c;
@cyan  : #86c1b9;
@blue  : #7cafc2;
@purple: #ba8baf;
@brown : #a16946;


body {
	font-family: 'Fira Mono', monospace;
  margin: 0;
  padding: 0;
  height: 100%;
  background-color: @black2;
  color: @grey3;
}

/********************
 * Top level
 ********************/

#grid {
  background: @black1;
  position: relative;

  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome and Opera */
}

#buttons {
  position: absolute;
  left: 0px;
}

.specialButton {
  margin-right: 4px;
}

/**************
 * AST
 **************/

/**************
 * AST layout rules
 **************/
.indent {
  margin-left: 16px;
}

.layout-block {
  display: block;
  & > .nested > .atom {
    margin-left: 0px;
  }
}

.layout-inline {
  display: inline-block;
}

.highlighted-indent {
  margin-left: 8px;
  padding-left: 8px;
  border-left: 1px solid @orange;
}

/**************
 * AST css
 **************/
.code {
  font-size: 10pt;
  font-family: 'Fira Code', monospace;
  padding: 8px;
  white-space: pre;
  width: max-content;
  .layout-block;

  div {
    .layout-inline;
  }

  &.selected {
    background-color: lighten(@black1, 5%);
  }

  .letexpr > .letbody {
    .layout-block;
  }

  .lambdaexpr {
    .layout-block;
    .highlighted-indent;
  }

  .lambdabinding, .arrow {
    color: @orange;
  }

  .value.tstr {
    color: @purple;
    font-style: italic;
    letter-spacing: -0.75px;
  }

  .lambdabody {
    .layout-block;
  }

  .ifbody {
    .layout-block;
    .indent;
  }

  .elsebody {
    .layout-block;
    .indent;
  }

  .atom {
    margin-left: 4px;
    margin-right: 4px;
  }

  .moduleseparator {
    color: @green;
  }

  .keyword {
    color: @green;
  }

  .precedence-1 {
    background-color: @black2;

    .precedence-2 {
      background-color: @grey1;
    }
  }
}

/********************
 * Entry box
 ********************/

#search-container {
  position: relative;
}

#search-container input {
  padding: 2px;
  width: 300px;
}

#search-container br {
  padding-bottom: 10px;
}

#darkEntry {
  z-index: 20;
  width: 300px;
  position: relative;
  color: #000;
  border: 1px solid #666;
  background: transparent;
}

#suggestion {
  position: absolute;
  top: 0;
  left: 0;
  color: #ccc;
  background: white;
  border: 1px solid #fff;
}

form {
  display: inline;
}

#autocomplete-holder {
  overflow-y: hidden;
  max-height: 250px;
  font-size: 85%;
}

.autocomplete-item.highlighted {
  background: #1c3670;
}
.autocomplete-item.greyed {
  color: grey;
}

.node.entry {
  // headers need to be relative to position them. We need to be above
  // the headers, and position:relative allows us to do it.
  position: relative;
  width: 330px;
  padding: 0.8em 1em;
}

.node.entry .types {
  float: right;
  text-transform: lowercase;
  font-family: monospace;
  font-size: 80%;
}

/* .node.string-entry { */
/*   position: relative; */
/*   width: 330px; */
/*   padding: 0.2em 0.4em; */
/* } */
/*  */
/* .string-container::before { */
/*   content: "“"; */
/* } */
/*  */
/* .string-container #darkEntry { */
/*   color: black; */
/*   border: 1px solid #666; */
/*   background: white; */
/* } */
/*  */
/* .string-container::after{ */
/*   content: "”"; */
/* } */
/*  */
/*  */




/********************
 Nodes
 ********************/
/* .node.functiondef { */
/*   /* Ideally, we'd have the background of a function behind the edges but */
/*   in front of the grid. Unfortunately, z-index on SVG is kinda hard, so */
/*   I don't know how to make this work. */
/*   background: transparent; */
/* } */
/*  */
/* .title { */
/*   [> Targets are larger than regular letters - this canonicalizes the size <] */
/*   max-height: 11px; */
/*   display: block; */
/* } */
/*  */
/* NODEWIDTH:
 * If you change the width of the node in any way, you need to go fix
 * client/Node.elm:nodeWidth, which tried to copy the render exactly.
 * This includes font, font width, padding, margin, border, etc, if it
 * affects width at all */
/* .node { */
/*   cursor: default; */
/*   box-sizing: border-box; */
/*   font-size: 14px; */
/*   background: #272728; */
/*   padding-top: 2px; */
/*   padding-bottom: 8.5px; */
/* } */
/*  */
/* .node.selected { */
/*   background: white; */
/*   color: black; */
/* } */
/*  */
/* .node.open { */
/*   border: 0.5px groove mediumvioletred; */
/* } */
/*  */
/* .node.open.selected { */
/*   border: 1.25px solid mediumvioletred; */
/* } */
/*  */
/* .node.selected .module { */
/*   background: white; */
/*   color: black; */
/*   border-right: 1px solid black; */
/* } */
/*  */
/* .page .title { */
/*   font-weight: bold; */
/* } */
/*  */
/* .datastore .title { */
/*   font-weight: bold; */
/*   [> font-size: 1.37em; <] */
/*   [> margin: 0; <] */
/*   [> border-bottom: 1px solid #777; <] */
/*   [> padding-bottom: 0.25em; <] */
/* } */
/*  */
/* .list { */
/*   display: inline-block; */
/*   margin-top: 0.5em; */
/*   line-height: 1.5em; */
/* } */
/*  */
/* .preview { */
/*   margin: 4px 0 0 0; */
/*   font-size: 9pt; */
/*   width: 500px; */
/* } */
/*  */
/* .preview pre { */
/*   margin-top: 0; */
/*   white-space: pre; */
/*   margin-bottom: 0; */
/* } */
/*  */
/* .preview .info { */
/*   color: red; */
/* } */
/*  */
/* .explanation, .info { */
/*   color: #cccccc; */
/*   width: 500px; */
/*   white-space: pre; */
/* } */
/*  */
/* .node .arg_none { */
/*   color: red; */
/*   font-size: 80%; */
/* } */
/*  */
/* .edgelabel { */
/*   font-size: 6px; */
/*   margin: 0px -3px; */
/* } */
/*  */
/* .conditional { */
/*   color: #ba8baf; */
/*   padding-left: 4px; */
/* } */
/*  */
/* .iter { */
/*   color: #7cafc2; */
/*   padding-left: 4px; */
/* } */
/*  */
/* .node .arg_const { */
/*   font-size: 90%; */
/* } */
/*  */
/* .node .arg_edge { */
/*   color: #585858; */
/*   font-size: 80%; */
/* } */
/*  */
/* .node .module { */
/*   padding-right: 4px; */
/*   padding-left: 4px; */
/*   padding-bottom: 3px; */
/*   padding-top: 2px; */
/*   background: #323234; */
/*   height: 100%; */
/*   margin-right: 4px; */
/* } */
/*  */
/* .node .name { */
/*   padding-left: 4px; */
/* } */
/*  */

/********************
 Node Header
 ********************/
/*  */
/* .header { */
/*   position: relative; */
/*   top: -36px; */
/*   left: 4px; */
/* } */
/*  */
/* .letter { */
/*   margin-top: 4px; */
/*   color: #dc9656; */
/*   font-size: 11px; */
/*   float: right; */
/*   margin-right: 8px; */
/* } */
/*  */

